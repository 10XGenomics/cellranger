--- a/lib/python3.10/site-packages/skimage/data/_fetchers.py
+++ b/lib/python3.10/site-packages/skimage/data/_fetchers.py
@@ -20,48 +20,44 @@
 legacy_data_dir = osp.abspath(osp.dirname(__file__))
 skimage_distribution_dir = osp.join(legacy_data_dir, '..')
 
-try:
-    from pooch import file_hash
-except ModuleNotFoundError:
-    # Function taken from
-    # https://github.com/fatiando/pooch/blob/master/pooch/utils.py
-    def file_hash(fname, alg="sha256"):
-        """
-        Calculate the hash of a given file.
-        Useful for checking if a file has changed or been corrupted.
-        Parameters
-        ----------
-        fname : str
-            The name of the file.
-        alg : str
-            The type of the hashing algorithm
-        Returns
-        -------
-        hash : str
-            The hash of the file.
-        Examples
-        --------
-        >>> fname = "test-file-for-hash.txt"
-        >>> with open(fname, "w") as f:
-        ...     __ = f.write("content of the file")
-        >>> print(file_hash(fname))
-        0fc74468e6a9a829f103d069aeb2bb4f8646bad58bf146bb0e3379b759ec4a00
-        >>> import os
-        >>> os.remove(fname)
-        """
-        import hashlib
-        if alg not in hashlib.algorithms_available:
-            raise ValueError(f'Algorithm \'{alg}\' not available in hashlib')
-        # Calculate the hash in chunks to avoid overloading the memory
-        chunksize = 65536
-        hasher = hashlib.new(alg)
-        with open(fname, "rb") as fin:
+# Function taken from
+# https://github.com/fatiando/pooch/blob/master/pooch/utils.py
+def file_hash(fname, alg="sha256"):
+    """
+    Calculate the hash of a given file.
+    Useful for checking if a file has changed or been corrupted.
+    Parameters
+    ----------
+    fname : str
+        The name of the file.
+    alg : str
+        The type of the hashing algorithm
+    Returns
+    -------
+    hash : str
+        The hash of the file.
+    Examples
+    --------
+    >>> fname = "test-file-for-hash.txt"
+    >>> with open(fname, "w") as f:
+    ...     __ = f.write("content of the file")
+    >>> print(file_hash(fname))
+    0fc74468e6a9a829f103d069aeb2bb4f8646bad58bf146bb0e3379b759ec4a00
+    >>> import os
+    >>> os.remove(fname)
+    """
+    import hashlib
+    if alg not in hashlib.algorithms_available:
+        raise ValueError(f'Algorithm \'{alg}\' not available in hashlib')
+    # Calculate the hash in chunks to avoid overloading the memory
+    chunksize = 65536
+    hasher = hashlib.new(alg)
+    with open(fname, "rb") as fin:
+        buff = fin.read(chunksize)
+        while buff:
+            hasher.update(buff)
             buff = fin.read(chunksize)
-            while buff:
-                hasher.update(buff)
-                buff = fin.read(chunksize)
-        return hasher.hexdigest()
-
+    return hasher.hexdigest()
 
 def _has_hash(path, expected_hash):
     """Check if the provided path has the expected hash."""
@@ -71,64 +67,9 @@
 
 
 def create_image_fetcher():
-    try:
-        import pooch
-        # older versions of Pooch don't have a __version__ attribute
-        if not hasattr(pooch, '__version__'):
-            retry = {}
-        else:
-            pooch_version = pooch.__version__.lstrip('v')
-            retry = {'retry_if_failed': 3}
-            # Keep version check in synch with
-            # scikit-image/requirements/optional.txt
-            if version.parse(pooch_version) < version.parse('1.3.0'):
-                # we need a more recent version of pooch to retry
-                retry = {}
-    except ImportError:
-        # Without pooch, fallback on the standard data directory
-        # which for now, includes a few limited data samples
-        return None, legacy_data_dir
-
-    # Pooch expects a `+` to exist in development versions.
-    # Since scikit-image doesn't follow that convention, we have to manually
-    # remove `.dev` with a `+` if it exists.
-    # This helps pooch understand that it should look in master
-    # to find the required files
-    if '+git' in __version__:
-        skimage_version_for_pooch = __version__.replace('.dev0+git', '+git')
-    else:
-        skimage_version_for_pooch = __version__.replace('.dev', '+')
-
-    if '+' in skimage_version_for_pooch:
-        url = ("https://github.com/scikit-image/scikit-image/raw/"
-               "{version}/skimage/")
-    else:
-        url = ("https://github.com/scikit-image/scikit-image/raw/"
-               "v{version}/skimage/")
-
-    # Create a new friend to manage your sample data storage
-    image_fetcher = pooch.create(
-        # Pooch uses appdirs to select an appropriate directory for the cache
-        # on each platform.
-        # https://github.com/ActiveState/appdirs
-        # On linux this converges to
-        # '$HOME/.cache/scikit-image'
-        # With a version qualifier
-        path=pooch.os_cache("scikit-image"),
-        base_url=url,
-        version=skimage_version_for_pooch,
-        version_dev="main",
-        env="SKIMAGE_DATADIR",
-        registry=registry,
-        urls=registry_urls,
-        # Note: this should read `retry_if_failed=3,`, but we generate that
-        # dynamically at import time above, in case installed pooch is a less
-        # recent version
-        **retry,
-    )
-
-    data_dir = osp.join(str(image_fetcher.abspath), 'data')
-    return image_fetcher, data_dir
+    # Without pooch, fallback on the standard data directory
+    # which for now, includes a few limited data samples
+    return None, legacy_data_dir
 
 
 image_fetcher, data_dir = create_image_fetcher()
