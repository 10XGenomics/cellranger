#
# Copyright (c) 2017 10X Genomics, Inc. All rights reserved.
#
@include "sc_vdj_assembler.mro"
@include "_vloupe_stages.mro"

pipeline SC_VDJ_ASSEMBLER_CS(
    in  string    sample_id,
    in  map[]     sample_def,
    in  string    sample_desc,
    in  path      vdj_reference_path,
    in  bool      denovo,
    in  int       force_cells,
    in  string    chain_type,
    out html      web_summary                      "Run summary HTML",
    out csv       metrics_summary_csv              "Run summary CSV"           "metrics_summary.csv",
    out csv       clonotypes                       "Clonotype info",
    out fasta     filtered_contig_fasta            "Filtered contig sequences FASTA"  "filtered_contig.fasta",
    out fastq     filtered_contig_fastq            "Filtered contig sequences FASTQ"  "filtered_contig.fastq",
    out csv       filtered_contig_annotations_csv  "Filtered contigs (CSV)"    "filtered_contig_annotations.csv",
    out fasta     all_contig_fasta                 "All-contig FASTA"          "all_contig.fasta",
    out fasta.fai all_contig_fasta_fai             "All-contig FASTA index"    "all_contig.fasta.fai",
    out fastq     all_contig_fastq                 "All-contig FASTQ"          "all_contig.fastq",
    out bam       all_contig_bam                   "Read-contig alignments"    "all_contig.bam",
    out bam.bai   all_contig_bam_bai               "Read-contig alignment index"  "all_contig.bam.bai",
    out json      all_contig_annotations_json      "All contig annotations (JSON)"  "all_contig_annotations.json",
    out bed       all_contig_annotations_bed       "All contig annotations (BED)"  "all_contig_annotations.bed",
    out csv       all_contig_annotations_csv       "All contig annotations (CSV)"  "all_contig_annotations.csv",
    out fasta     consensus_fasta                  "Clonotype consensus FASTA"  "consensus.fasta",
    out fasta.fai consensus_fasta_fai              "Clonotype consensus FASTA index"  "consensus.fasta.fai",
    out fastq     consensus_fastq                  "Clonotype consensus FASTQ"  "consensus.fastq",
    out bam       consensus_bam                    "Contig-consensus alignments"  "consensus.bam",
    out bam.bai   consensus_bam_bai                "Contig-consensus alignment index"  "consensus.bam.bai",
    out json      consensus_annotations_json       "Clonotype consensus annotations (JSON)"  "consensus_annotations.json",
    out csv       consensus_annotations_csv        "Clonotype consensus annotations (CSV)"  "consensus_annotations.csv",
    out fasta     concat_ref_fasta                 "Concatenated reference sequences"  "concat_ref.fasta",
    out fasta.fai concat_ref_fasta_fai             "Concatenated reference index"  "concat_ref.fasta.fai",
    out bam       concat_ref_bam                   "Contig-reference alignments"  "concat_ref.bam",
    out bam.bai   concat_ref_bam_bai               "Contig-reference alignment index"  "concat_ref.bam.bai",
    out vloupe    vloupe                           "Loupe V(D)J Browser file"  "vloupe.vloupe",
)
{
    call SC_VDJ_ASSEMBLER(
        sample_id                    = self.sample_id,
        sample_def                   = self.sample_def,
        sample_desc                  = self.sample_desc,
        chemistry_name               = "SCVDJ_auto",
        custom_chemistry_def         = null,
        barcode_confidence_threshold = 0.975,
        align                        = null,
        primers                      = [
            {
                "name": "P5",
                "seq": "AATGATACGGCGACCACCGAGATCT"
            },
            {
                "name": "P7",
                "seq": "CAAGCAGAAGACGGCATACGAGAT"
            },
            {
                "name": "R1",
                "seq": "ACACTCTTTCCCTACACGACGCTCTTCCGATCT"
            },
            {
                "name": "R2",
                "seq": "GTGACTGGAGTTCAGACGTGTGCTCTTCCGATCT"
            },
            {
                "name": "polyA",
                "seq": "AAAAAAAAAAAAAAAAAAAA"
            },
            {
                "name": "rt_primer",
                "seq": "AAGCAGTGGTATCAACGCAGAGTACAT"
            },
            {
                "name": "spacer",
                "seq": "TTTCTTATATGGG"
            }
        ],
        recovered_cells              = null,
        force_cells                  = self.force_cells,
        subsample_rate               = 1,
        initial_reads                = null,
        vdj_reference_path           = self.vdj_reference_path,
        denovo                       = self.denovo,
        skip_metrics                 = false,
        retain_fastqs                = false,
        r1_length                    = null,
        r2_length                    = null,
        filter_sw_params             = {
            "min_sw_score": 20,
            "seed": 20
        },
        min_kmer_count               = 2,
        min_readpairs_per_umi        = 5,
        min_contig_len               = 250,
        min_qual                     = 2,
        score_factor                 = 0.6,
        qual_factor                  = 0.9,
        min_sw_score                 = 50,
        rt_error                     = 0.0001,
        min_anno_score_ratios        = {
            "5U": 0.7,
            "C": 0.7,
            "D": 0.4,
            "J": 0.65,
            "V": 0.62
        },
        min_anno_word_sizes          = {
            "5U": 15,
            "C": 15,
            "D": 5,
            "J": 15,
            "V": 15
        },
        target_n50_rppu              = 400,
        chain_type                   = self.chain_type,
    )

    call VLOUPE_PREPROCESS(
        pipestance_type             = "SC_VDJ_ASSEMBLER_CS",
        sample_id                   = self.sample_id,
        sample_desc                 = self.sample_desc,
        concat_ref_bam              = SC_VDJ_ASSEMBLER.concat_ref_bam,
        concat_ref_bam_bai          = SC_VDJ_ASSEMBLER.concat_ref_bam_bai,
        concat_ref_fasta            = SC_VDJ_ASSEMBLER.concat_ref_fasta,
        concat_ref_fasta_fai        = SC_VDJ_ASSEMBLER.concat_ref_fasta_fai,
        concat_ref_annotations_json = SC_VDJ_ASSEMBLER.concat_ref_annotations_json,
        clonotypes_csv              = SC_VDJ_ASSEMBLER.clonotypes,
        consensus_bam               = SC_VDJ_ASSEMBLER.consensus_bam,
        consensus_bam_bai           = SC_VDJ_ASSEMBLER.consensus_bam_bai,
        consensus_annotations_json  = SC_VDJ_ASSEMBLER.consensus_annotations_json,
        consensus_fasta             = SC_VDJ_ASSEMBLER.consensus_fasta,
        consensus_fasta_fai         = SC_VDJ_ASSEMBLER.consensus_fasta_fai,
        contig_bam_relative_path    = "./all_contig.bam",
        contig_bam_bai              = SC_VDJ_ASSEMBLER.all_contig_bam_bai,
        contig_annotations_json     = SC_VDJ_ASSEMBLER.all_contig_annotations_json,
        contig_annotations_bed      = SC_VDJ_ASSEMBLER.all_contig_annotations_bed,
        contig_fasta                = SC_VDJ_ASSEMBLER.all_contig_fasta,
        contig_fasta_fai            = SC_VDJ_ASSEMBLER.all_contig_fasta_fai,
        metrics_csv                 = SC_VDJ_ASSEMBLER.metrics_summary_csv,
    )

    return (
        web_summary                 = SC_VDJ_ASSEMBLER.web_summary,
        metrics_summary_csv         = SC_VDJ_ASSEMBLER.metrics_summary_csv,
        all_contig_fasta            = SC_VDJ_ASSEMBLER.all_contig_fasta,
        all_contig_fasta_fai        = SC_VDJ_ASSEMBLER.all_contig_fasta_fai,
        all_contig_fastq            = SC_VDJ_ASSEMBLER.all_contig_fastq,
        all_contig_annotations_json = SC_VDJ_ASSEMBLER.all_contig_annotations_json,
        all_contig_annotations_csv  = SC_VDJ_ASSEMBLER.all_contig_annotations_csv,
        all_contig_annotations_bed  = SC_VDJ_ASSEMBLER.all_contig_annotations_bed,
        all_contig_bam              = SC_VDJ_ASSEMBLER.all_contig_bam,
        all_contig_bam_bai          = SC_VDJ_ASSEMBLER.all_contig_bam_bai,
        filtered_contig_fasta       = SC_VDJ_ASSEMBLER.filtered_contig_fasta,
        filtered_contig_fastq       = SC_VDJ_ASSEMBLER.filtered_contig_fastq,
        filtered_contig_annotations_csv = SC_VDJ_ASSEMBLER.filtered_contig_annotations_csv,
        consensus_fasta             = SC_VDJ_ASSEMBLER.consensus_fasta,
        consensus_fasta_fai         = SC_VDJ_ASSEMBLER.consensus_fasta_fai,
        consensus_fastq             = SC_VDJ_ASSEMBLER.consensus_fastq,
        concat_ref_fasta            = SC_VDJ_ASSEMBLER.concat_ref_fasta,
        concat_ref_fasta_fai        = SC_VDJ_ASSEMBLER.concat_ref_fasta_fai,
        consensus_bam               = SC_VDJ_ASSEMBLER.consensus_bam,
        consensus_bam_bai           = SC_VDJ_ASSEMBLER.consensus_bam_bai,
        concat_ref_bam              = SC_VDJ_ASSEMBLER.concat_ref_bam,
        concat_ref_bam_bai          = SC_VDJ_ASSEMBLER.concat_ref_bam_bai,
        consensus_annotations_json  = SC_VDJ_ASSEMBLER.consensus_annotations_json,
        consensus_annotations_csv   = SC_VDJ_ASSEMBLER.consensus_annotations_csv,
        clonotypes                  = SC_VDJ_ASSEMBLER.clonotypes,
        vloupe                      = VLOUPE_PREPROCESS.output_for_vloupe,
    )
}
