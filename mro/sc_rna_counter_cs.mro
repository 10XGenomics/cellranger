#
# Copyright (c) 2015 10X Genomics, Inc. All rights reserved.
#
@include "sc_rna_counter.mro"
@include "_cloupe_stages.mro"

pipeline SC_RNA_COUNTER_CS(
    in  string  sample_id,
    in  map[]   sample_def,
    in  string  sample_desc,
    in  path    reference_path,
    in  int     recovered_cells,
    in  bool    no_secondary_analysis,
    in  int     force_cells,
    in  string  chemistry,
    in  int     r1_length,
    in  int     r2_length,
    in  csv     feature_reference,
    out html    web_summary                    "Run summary HTML",
    out csv     metrics_summary                "Run summary CSV",
    out bam     possorted_genome_bam           "BAM"                       "possorted_genome_bam.bam",
    out bam.bai possorted_genome_bam_index     "BAM index"                 "possorted_genome_bam.bam.bai",
    out path    filtered_feature_bc_matrix     "Filtered feature-barcode matrices MEX",
    out h5      filtered_feature_bc_matrix_h5  "Filtered feature-barcode matrices HDF5"  "filtered_feature_bc_matrix.h5",
    out path    raw_feature_bc_matrix          "Unfiltered feature-barcode matrices MEX",
    out h5      raw_feature_bc_matrix_h5       "Unfiltered feature-barcode matrices HDF5"  "raw_feature_bc_matrix.h5",
    out path    analysis                       "Secondary analysis output CSV",
    out h5      molecule_info                  "Per-molecule read information",
    out path    crispr_analysis                "CRISPR-specific analysis",
    out cloupe  cloupe                         "Loupe Cell Browser file",
)
{
    call EXPAND_SAMPLE_DEF(
        raw_sample_def = self.sample_def,
    ) using (
        local = true,
    )

    call SC_RNA_COUNTER(
        sample_id                    = self.sample_id,
        sample_def                   = EXPAND_SAMPLE_DEF.sample_def,
        chemistry_name               = self.chemistry,
        custom_chemistry_def         = null,
        sample_desc                  = self.sample_desc,
        barcode_confidence_threshold = 0.975,
        umi_min_qual_threshold       = 10,
        align                        = {
            "aligner": "star",
            "high_conf_mapq": null,
        },
        align_threads                = 4,
        reference_path               = self.reference_path,
        primers                      = [
            {
                "name": "P5",
                "seq": "AATGATACGGCGACCACCGAGATCT",
            },
            {
                "name": "P7",
                "seq": "CAAGCAGAAGACGGCATACGAGAT",
            },
            {
                "name": "R1",
                "seq": "ACACTCTTTCCCTACACGACG",
            },
            {
                "name": "R2",
                "seq": "GTGACTGGAGTTCAGACGTGTG",
            },
            {
                "name": "switch_oligo",
                "seq": "AAGCAGTGGTATCAACGCAGAGTACATGGG",
            },
            {
                "name": "polyA",
                "seq": "AAAAAAAAAAAAAAAAAAAA",
            },
        ],
        recovered_cells              = self.recovered_cells,
        force_cells                  = self.force_cells,
        subsample_rate               = 1,
        initial_reads                = null,
        r1_length                    = self.r1_length,
        r2_length                    = self.r2_length,
        annotation_params            = null,
        no_secondary_analysis        = self.no_secondary_analysis,
        library_type_filter          = null,
        filter_umis                  = true,
        retain_fastqs                = false,
        allowed_chems                = [
            "auto",
            "custom",
            "threeprime",
            "fiveprime",
            "SC3P_auto",
            "SC5P_auto",
            "SC3Pv1",
            "SC3Pv2",
            "SC3Pv3",
            "SC5P-PE",
            "SC5P-R2",
            "SC5P-R1",
        ],
        feature_reference            = self.feature_reference,
        num_reads_to_check_barcode   = null,
        barcode_compatibility_cutoff = null,
    )

    call CLOUPE_PREPROCESS(
        pipestance_type              = "SC_RNA_COUNTER_CS",
        sample_id                    = self.sample_id,
        sample_desc                  = self.sample_desc,
        analysis                     = SC_RNA_COUNTER.analysis,
        filtered_gene_bc_matrices_h5 = SC_RNA_COUNTER.filtered_gene_bc_matrices_h5,
        metrics_json                 = SC_RNA_COUNTER.metrics_summary_json,
        aggregation_csv              = null,
        gem_group_index_json         = null,
        no_secondary_analysis        = false,
    )

    return (
        possorted_genome_bam          = SC_RNA_COUNTER.possorted_genome_bam,
        possorted_genome_bam_index    = SC_RNA_COUNTER.possorted_genome_bam_index,
        web_summary                   = SC_RNA_COUNTER.web_summary,
        metrics_summary               = SC_RNA_COUNTER.metrics_summary_csv,
        raw_feature_bc_matrix         = SC_RNA_COUNTER.raw_gene_bc_matrices_mex,
        raw_feature_bc_matrix_h5      = SC_RNA_COUNTER.raw_gene_bc_matrices_h5,
        filtered_feature_bc_matrix    = SC_RNA_COUNTER.filtered_gene_bc_matrices_mex,
        filtered_feature_bc_matrix_h5 = SC_RNA_COUNTER.filtered_gene_bc_matrices_h5,
        analysis                      = SC_RNA_COUNTER.analysis_csv,
        molecule_info                 = SC_RNA_COUNTER.molecule_info,
        crispr_analysis               = SC_RNA_COUNTER.crispr_analysis,
        cloupe                        = CLOUPE_PREPROCESS.output_for_cloupe,
    )
}
