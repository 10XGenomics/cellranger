#
# Copyright (c) 2017 10X Genomics, Inc. All rights reserved.
#
@include "temp_basic_sc_rna_counter_stages.mro"
@include "temp_common_stages.mro"

pipeline temp_BASIC_SC_RNA_COUNTER(
    in  string  sample_id,
    in  map     chemistry_def,
    in  string  barcode_whitelist,
    in  map[]   chunks,
    in  float   barcode_confidence_threshold,
    in  int     umi_min_qual_threshold,
    in  map     align,
    in  int     align_threads,
    in  path    reference_path,
    in  int     recovered_cells,
    in  int     force_cells,
    in  json    cell_barcodes                  "Cell barcode override",
    in  bool    correct_barcodes,
    in  bool    rescue_multimappers,
    in  bool    skip_metrics,
    in  map     annotation_params,
    in  int     mark_dupes_mem_gb,
    in  bool    retain_fastqs,
    in  float   subsample_rate,
    in  int     initial_reads,
    in  map[]   primers,
    in  int     r1_length,
    in  int     r2_length,
    out map[]   subsampled_matrices,
    out csv     filtered_barcodes,
    out bam     possorted_genome_bam,
    out bam.bai possorted_genome_bam_index,
    out json    summary,
    out h5      barcode_summary,
    out h5      molecule_info,
    out h5      raw_gene_bc_matrices_h5,
    out path    raw_gene_bc_matrices_mex,
    out h5      filtered_gene_bc_matrices_h5,
    out path    filtered_gene_bc_matrices_mex,
    out map     align,
    out int[]   gem_groups,
    out fastq[] read1s,
)
{
    call volatile temp_CHUNK_READS(
        chunks         = self.chunks,
        reads_per_file = 5000000,
    )

    call volatile temp_EXTRACT_READS(
        chunks            = temp_CHUNK_READS.out_chunks,
        chemistry_def     = self.chemistry_def,
        barcode_whitelist = self.barcode_whitelist,
        reads_per_file    = 5000000,
        subsample_rate    = self.subsample_rate,
        initial_reads     = self.initial_reads,
        primers           = self.primers,
        align             = self.align,
        r1_length         = self.r1_length,
        r2_length         = self.r2_length,
        skip_metrics      = false,
    )

    call temp_SUMMARIZE_READ_REPORTS(
        extract_reads_summary = temp_EXTRACT_READS.summary,
        barcode_counts        = temp_EXTRACT_READS.barcode_counts,
        gem_groups            = temp_EXTRACT_READS.gem_groups,
        read_groups           = temp_EXTRACT_READS.read_groups,
        align                 = temp_EXTRACT_READS.align,
        bam_comments          = temp_EXTRACT_READS.bam_comments,
        read1s                = temp_EXTRACT_READS.reads,
        read2s                = temp_EXTRACT_READS.read2s,
        retain_fastqs         = self.retain_fastqs,
        chemistry_def         = self.chemistry_def,
    )

    call volatile temp_ALIGN_READS(
        reads             = temp_EXTRACT_READS.reads,
        read2s            = temp_EXTRACT_READS.read2s,
        read_groups       = temp_SUMMARIZE_READ_REPORTS.read_groups,
        reference_path    = self.reference_path,
        threads           = self.align_threads,
        max_hits_per_read = -1,
    )

    call volatile temp_ATTACH_BCS_AND_UMIS(
        genome_inputs                = temp_ALIGN_READS.genome_output,
        reference_path               = self.reference_path,
        gem_groups                   = temp_SUMMARIZE_READ_REPORTS.gem_groups,
        chemistry_def                = self.chemistry_def,
        annotation_params            = self.annotation_params,
        barcode_whitelist            = self.barcode_whitelist,
        barcode_counts               = temp_SUMMARIZE_READ_REPORTS.barcode_counts,
        barcode_confidence_threshold = self.barcode_confidence_threshold,
        umi_min_qual_threshold       = self.umi_min_qual_threshold,
        bam_comments                 = temp_SUMMARIZE_READ_REPORTS.bam_comments,
        rescue_multimappers          = self.rescue_multimappers,
        skip_metrics                 = self.skip_metrics,
        correct_barcodes             = self.correct_barcodes,
    )

    call temp_SUMMARIZE_ATTACH(
        summary           = temp_ATTACH_BCS_AND_UMIS.summary,
        barcodes_detected = temp_ATTACH_BCS_AND_UMIS.barcodes_detected,
    )

    call volatile temp_BUCKET_BY_BC(
        nbases         = 2,
        inputs         = temp_ATTACH_BCS_AND_UMIS.output,
        num_alignments = temp_ATTACH_BCS_AND_UMIS.num_alignments,
    )

    call volatile temp_SORT_BY_BC(
        buckets = temp_BUCKET_BY_BC.buckets,
    )

    call volatile temp_MARK_DUPLICATES(
        input          = temp_SORT_BY_BC,
        reference_path = self.reference_path,
        align          = temp_SUMMARIZE_READ_REPORTS.align,
        mem_gb         = self.mark_dupes_mem_gb,
    )

    call temp_SUMMARIZE_MKDUP(
        summary           = temp_MARK_DUPLICATES.summary,
        barcodes_detected = null,
    )

    call temp_SORT_BY_POS(
        inputs      = temp_MARK_DUPLICATES.output,
        num_threads = 6,
        mem_gb      = 8,
    )

    call temp_COUNT_GENES(
        sample_id         = self.sample_id,
        inputs            = temp_MARK_DUPLICATES.output,
        reference_path    = self.reference_path,
        gem_groups        = temp_SUMMARIZE_READ_REPORTS.gem_groups,
        align             = temp_SUMMARIZE_READ_REPORTS.align,
        chemistry_def     = self.chemistry_def,
        barcode_whitelist = self.barcode_whitelist,
        barcodes_detected = temp_SUMMARIZE_ATTACH.barcodes_detected,
    )

    call temp_FILTER_BARCODES(
        sample_id          = self.sample_id,
        matrices_h5        = temp_COUNT_GENES.matrices_h5,
        raw_fastq_summary  = temp_SUMMARIZE_READ_REPORTS.summary,
        attach_bcs_summary = temp_SUMMARIZE_ATTACH.summary,
        recovered_cells    = self.recovered_cells,
        force_cells        = self.force_cells,
        barcode_summary    = temp_COUNT_GENES.barcode_summary,
        barcode_whitelist  = self.barcode_whitelist,
        gem_groups         = temp_SUMMARIZE_READ_REPORTS.gem_groups,
        chemistry_def      = self.chemistry_def,
        cell_barcodes      = self.cell_barcodes,
    )

    call temp_REPORT_MOLECULES(
        inputs                      = temp_MARK_DUPLICATES.output,
        reference_path              = self.reference_path,
        align                       = temp_SUMMARIZE_READ_REPORTS.align,
        barcode_whitelist           = self.barcode_whitelist,
        gem_groups                  = temp_SUMMARIZE_READ_REPORTS.gem_groups,
        extract_reads_summary       = temp_SUMMARIZE_READ_REPORTS.summary,
        attach_bcs_and_umis_summary = temp_SUMMARIZE_ATTACH.summary,
        mark_duplicates_summary     = temp_SUMMARIZE_MKDUP.summary,
        recovered_cells             = self.recovered_cells,
        force_cells                 = self.force_cells,
        filtered_barcodes           = temp_FILTER_BARCODES.filtered_barcodes,
    )

    call volatile temp_SUBSAMPLE_READS(
        molecule_info     = temp_REPORT_MOLECULES.output,
        filtered_barcodes = temp_FILTER_BARCODES.filtered_barcodes,
    )

    call temp_SUMMARIZE_BASIC_REPORTS(
        reference_path               = self.reference_path,
        align                        = temp_SUMMARIZE_READ_REPORTS.align,
        barcode_whitelist            = self.barcode_whitelist,
        gem_groups                   = temp_SUMMARIZE_READ_REPORTS.gem_groups,
        extract_reads_summary        = temp_SUMMARIZE_READ_REPORTS.summary,
        attach_bcs_and_umis_summary  = temp_SUMMARIZE_ATTACH.summary,
        mark_duplicates_summary      = temp_SUMMARIZE_MKDUP.summary,
        count_genes_reporter_summary = temp_COUNT_GENES.reporter_summary,
        filter_barcodes_summary      = temp_FILTER_BARCODES.summary,
        subsample_molecules_summary  = temp_SUBSAMPLE_READS.summary,
        raw_gene_bc_matrices_h5      = temp_COUNT_GENES.matrices_h5,
        filtered_gene_bc_matrices_h5 = temp_FILTER_BARCODES.filtered_matrices_h5,
    )

    return (
        subsampled_matrices           = temp_SUBSAMPLE_READS.subsampled_matrices,
        filtered_barcodes             = temp_FILTER_BARCODES.filtered_barcodes,
        possorted_genome_bam          = temp_SORT_BY_POS.output,
        possorted_genome_bam_index    = temp_SORT_BY_POS.index,
        summary                       = temp_SUMMARIZE_BASIC_REPORTS.summary,
        barcode_summary               = temp_COUNT_GENES.barcode_summary,
        molecule_info                 = temp_REPORT_MOLECULES.output,
        raw_gene_bc_matrices_h5       = temp_COUNT_GENES.matrices_h5,
        raw_gene_bc_matrices_mex      = temp_COUNT_GENES.matrices_mex,
        filtered_gene_bc_matrices_h5  = temp_FILTER_BARCODES.filtered_matrices_h5,
        filtered_gene_bc_matrices_mex = temp_FILTER_BARCODES.filtered_matrices_mex,
        align                         = temp_SUMMARIZE_READ_REPORTS.align,
        gem_groups                    = temp_SUMMARIZE_READ_REPORTS.gem_groups,
        read1s                        = temp_SUMMARIZE_READ_REPORTS.read1s,
    )
}
