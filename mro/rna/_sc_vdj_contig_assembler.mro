@include "_cr_lib_stages.mro"
@include "_cr_vdj_stages.mro"

pipeline SC_VDJ_CONTIG_ASSEMBLER(
    in  string            sample_id,
    in  map<ChemistryDef> chemistry_defs,
    in  int               gem_well,
    in  map[]             chunks,
    in  int               r1_length,
    in  int               r2_length,
    in  int               initial_reads,
    in  float             subsample_rate,
    in  path              vdj_reference_folder,
    in  bool              denovo,
    in  path              inner_primers,
    in  string            receptor,
    in  FeatureConfig     feature_config,
    in  int               min_contig_length,
    out json              summary,
    out ReadShards        read_shards,
    out int[]             gem_groups,
    out json              raw_barcode_counts,
    out json              corrected_barcode_counts,
    out int               n50_n50_rpu,
    out int               processed_read_pairs,
    out bam               contig_bam,
    out bam.bai           contig_bam_bai,
    out tsv               summary_tsv,
    out tsv               umi_summary_tsv,
    out json              asm_contig_annotations,
    out csv               barcode_support,
    out json[]            barcodes_in_chunks,
    out fastq             unmapped_sample_fastq,
    out int               total_read_pairs,
    out arp.bincode       assemblable_reads_per_bc,
    out smf.json          sequencing_metrics,
    out bdf.bincode       barcode_brief,
    out bd.bincode        barcode_full,
)
{
    call MAKE_SHARD(
        gem_well               = self.gem_well,
        chemistry_defs         = self.chemistry_defs,
        read_chunks            = self.chunks,
        r1_length              = self.r1_length,
        r2_length              = self.r2_length,
        subsample_rate         = self.subsample_rate,
        initial_read_pairs     = self.initial_reads,
        reference_path         = null,
        target_features        = null,
        target_set             = null,
        target_set_name        = null,
        feature_reference_path = null,
        feature_config         = self.feature_config,
    )

    call BARCODE_CORRECTION(
        gem_well               = self.gem_well,
        barcode_counts         = MAKE_SHARD.barcode_counts,
        barcode_segment_counts = MAKE_SHARD.barcode_segment_counts,
        chemistry_defs         = self.chemistry_defs,
        invalid_uncorrected    = MAKE_SHARD.invalid,
        valid_read_metrics     = MAKE_SHARD.bc_correct_summary,
        min_reads_to_report_bc = 1000,
        correction_map         = null,
        barcodes_under_tissue  = null,
    )

    call RUST_BRIDGE(
        chemistry_defs           = self.chemistry_defs,
        gem_well                 = self.gem_well,
        valid_uncorrected        = MAKE_SHARD.valid,
        valid_corrected          = BARCODE_CORRECTION.valid_corrected,
        raw_barcode_counts       = MAKE_SHARD.barcode_counts,
        corrected_barcode_counts = BARCODE_CORRECTION.corrected_barcode_counts,
    )

    call ASSEMBLE_VDJ(
        sample_id                = self.sample_id,
        chemistry_defs           = self.chemistry_defs,
        bc_sorted_rna_reads      = RUST_BRIDGE.bc_sorted_rna_reads,
        vdj_reference_path       = self.vdj_reference_folder,
        n50_n50_rpu              = RUST_BRIDGE.n50_n50_rpu,
        npairs                   = RUST_BRIDGE.processed_read_pairs,
        receptor                 = self.receptor,
        denovo                   = self.denovo,
        inner_enrichment_primers = self.inner_primers,
        total_read_pairs         = MAKE_SHARD.total_read_pairs,
        corrected_bc_counts      = RUST_BRIDGE.corrected_barcode_counts_json,
        min_contig_length        = self.min_contig_length,
    )

    call MERGE_METRICS(
        summaries = [
            MAKE_SHARD.summary,
            BARCODE_CORRECTION.summary,
            RUST_BRIDGE.summary,
        ],
    )

    return (
        summary                  = MERGE_METRICS.summary,
        read_shards              = {
            corrected_reads: BARCODE_CORRECTION.valid_corrected,
            invalid_reads:   BARCODE_CORRECTION.invalid,
            valid_reads:     MAKE_SHARD.valid,
        },
        gem_groups               = RUST_BRIDGE.gem_groups,
        raw_barcode_counts       = RUST_BRIDGE.raw_barcode_counts_json,
        corrected_barcode_counts = RUST_BRIDGE.corrected_barcode_counts_json,
        n50_n50_rpu              = RUST_BRIDGE.n50_n50_rpu,
        processed_read_pairs     = RUST_BRIDGE.processed_read_pairs,
        contig_bam               = ASSEMBLE_VDJ.contig_bam,
        contig_bam_bai           = ASSEMBLE_VDJ.contig_bam_bai,
        summary_tsv              = ASSEMBLE_VDJ.summary_tsv,
        umi_summary_tsv          = ASSEMBLE_VDJ.umi_summary_tsv,
        asm_contig_annotations   = ASSEMBLE_VDJ.contig_annotations,
        barcode_support          = ASSEMBLE_VDJ.barcode_support,
        barcodes_in_chunks       = ASSEMBLE_VDJ.barcodes_in_chunks,
        unmapped_sample_fastq    = ASSEMBLE_VDJ.unmapped_sample_fastq,
        total_read_pairs         = MAKE_SHARD.total_read_pairs,
        assemblable_reads_per_bc = ASSEMBLE_VDJ.assemblable_reads_per_bc,
        sequencing_metrics       = MAKE_SHARD.sequencing_metrics,
        barcode_brief            = ASSEMBLE_VDJ.barcode_brief,
        barcode_full             = ASSEMBLE_VDJ.barcode_full,
    )
}
