#
# Copyright (c) 2017 10X Genomics, Inc. All rights reserved.
#
@include "sc_rna_analyzer.mro"
@include "_cloupe_stages.mro"
@include "_sc_rna_aggregator_stages.mro"
@include "_sc_rna_analyzer_stages.mro"

pipeline SC_RNA_REANALYZER_CS(
    in  string sample_id,
    in  string sample_desc,
    in  h5     filtered_matrices_h5,
    in  csv    params_csv,
    in  csv    aggregation_csv,
    in  csv    barcodes_csv,
    in  csv    genes_csv,
    in  csv    exclude_genes_csv,
    in  int    force_cells,
    out path   analysis              "Secondary analysis output CSV",
    out html   web_summary           "Secondary analysis web summary",
    out csv    params                "Copy of the input parameter CSV",
    out csv    aggregation           "Copy of the input aggregation CSV",
    out cloupe cloupe                "Loupe Cell Browser file",
)
{
    call REANALYZER_PREFLIGHT(
        filtered_matrices_h5 = self.filtered_matrices_h5,
    ) using (
        preflight = true,
    )

    call PARSE_PARAM_CSV(
        params_csv = self.params_csv,
    )

    call PARSE_CSV(
        pipestance_root = null,
        aggregation_csv = self.aggregation_csv,
        reanalyze       = true,
        matrix_h5       = self.filtered_matrices_h5,
    )

    call SETUP_SAMPLES(
        sample_defs = PARSE_CSV.sample_defs,
    ) using (
        volatile = true,
    )

    call SC_RNA_ANALYZER(
        # don't support barnyard re-analysis (but see note below)
        raw_matrices_h5            = null,
        # NOTE: if using force_cells, this might actually be the raw matrix
        filtered_matrices_h5       = self.filtered_matrices_h5,
        no_secondary_analysis      = false,
        aggr_library_info          = SETUP_SAMPLES.libraries,
        use_genes                  = self.genes_csv,
        exclude_genes              = self.exclude_genes_csv,
        use_bcs                    = self.barcodes_csv,
        num_analysis_bcs           = PARSE_PARAM_CSV.num_analysis_bcs,
        random_seed                = PARSE_PARAM_CSV.random_seed,
        num_pca_bcs                = PARSE_PARAM_CSV.num_pca_bcs,
        num_pca_genes              = PARSE_PARAM_CSV.num_pca_genes,
        num_principal_comps        = PARSE_PARAM_CSV.num_principal_comps,
        chemistry_batch_correction = SETUP_SAMPLES.chemistry_batch_correction,
        cbc_knn                    = PARSE_PARAM_CSV.cbc_knn,
        cbc_alpha                  = PARSE_PARAM_CSV.cbc_alpha,
        cbc_sigma                  = PARSE_PARAM_CSV.cbc_sigma,
        cbc_realign_panorama       = PARSE_PARAM_CSV.cbc_realign_panorama,
        max_clusters               = PARSE_PARAM_CSV.max_clusters,
        graphclust_neighbors       = PARSE_PARAM_CSV.graphclust_neighbors,
        neighbor_a                 = PARSE_PARAM_CSV.neighbor_a,
        neighbor_b                 = PARSE_PARAM_CSV.neighbor_b,
        tsne_perplexity            = PARSE_PARAM_CSV.tsne_perplexity,
        tsne_input_pcs             = PARSE_PARAM_CSV.tsne_input_pcs,
        tsne_max_dims              = PARSE_PARAM_CSV.tsne_max_dims,
        tsne_max_iter              = PARSE_PARAM_CSV.tsne_max_iter,
        tsne_stop_lying_iter       = PARSE_PARAM_CSV.tsne_stop_lying_iter,
        tsne_mom_switch_iter       = PARSE_PARAM_CSV.tsne_mom_switch_iter,
        tsne_theta                 = PARSE_PARAM_CSV.tsne_theta,
        force_cells                = self.force_cells,
    )

    call SUMMARIZE_REANALYSIS(
        sample_id                = self.sample_id,
        sample_desc              = self.sample_desc,
        filtered_matrices        = self.filtered_matrices_h5,
        analysis                 = SC_RNA_ANALYZER.analysis,
        analyze_matrices_summary = SC_RNA_ANALYZER.summary,
    )

    call CLOUPE_PREPROCESS(
        pipestance_type              = "SC_RNA_REANALYZER_CS",
        sample_id                    = self.sample_id,
        sample_desc                  = self.sample_desc,
        analysis                     = SC_RNA_ANALYZER.analysis,
        filtered_gene_bc_matrices_h5 = SC_RNA_ANALYZER.cloupe_matrix_h5,
        metrics_json                 = null,
        aggregation_csv              = self.aggregation_csv,
        gem_group_index_json         = null,
        no_secondary_analysis        = false,
    )

    return (
        analysis    = SC_RNA_ANALYZER.analysis_csv,
        web_summary = SUMMARIZE_REANALYSIS.web_summary,
        params      = PARSE_PARAM_CSV.params_csv,
        aggregation = PARSE_CSV.aggregation_csv,
        cloupe      = CLOUPE_PREPROCESS.output_for_cloupe,
    )
}
