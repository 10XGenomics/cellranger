#!/usr/bin/env python
#
# Copyright (c) 2017 10X Genomics, Inc. All rights reserved.
#
import docopt
import os
import sys

from cellranger.matrix import CountMatrix
import cellranger.io as cr_io

VERSION = "%s %s %s\n%s" % (os.getenv('TENX_PRODUCT', ''), os.getenv('TENX_SUBCMD', ''), os.getenv('TENX_VERSION', ''), os.getenv('TENX_COPYRIGHT', ''))

__doc__ = '''
Tool for converting feature-barcode matrices from sparse format to dense 
CSV format, for use by external programs.

The commands below should be preceded by 'cellranger':

Usage:
    mat2csv <input_path> <output_csv> [--genome=GENOME]
    mat2csv -h | --help | --version

Arguments:
    input_path      Path to a Cell Ranger feature-barcode matrix. Can be either
                        a feature-barcode h5 file (recommended) or a path to a 
                        MEX Cell Ranger output folder.
    output_csv      Output CSV file.

Options:
    --genome=GENOME          Specify which genome to extract. This only applies
                                 to multi-genome h5 input files.
    -h --help                Show this message.
    --version                Show version.
'''

def main():
    args = docopt.docopt(__doc__, version=VERSION)
    output_csv = cr_io.get_output_path(args['<output_csv>'])
    input_path = args['<input_path>']
    genome = args['--genome']

    if input_path.endswith(".h5"):
        input_path = cr_io.get_input_path(input_path)
        gbm = CountMatrix.load_h5_file(input_path)
    else:
        input_path = cr_io.get_input_path(input_path, is_dir=True)
        gbm = CountMatrix.load_mtx(input_path)
        if genome is not None:
            sys.exit("The '--genome' argument can only be use with .h5 input files, not with MEX directories")

    if genome is None:
        matrix = gbm
    else:
        genomes = gbm.get_genomes()
        if genome not in genomes:
            sys.exit("Genome '%s' not found (genomes available: %s)" % (genome, genomes))
        matrix = gbm.select_features_by_genome(genome)

    num_features, num_barcodes, num_entries = matrix.features_dim, matrix.bcs_dim, matrix.get_num_nonzero()
    dense_size = num_features * num_barcodes
    zero_frac = float(dense_size - num_entries) * 100.0 / float(dense_size)
    print """
    WARNING: this matrix has %d x %d (%d total) elements, %f%% of which are zero.
    Converting it to dense CSV format may be very slow and memory intensive.
    Moreover, other programs (e.g. Excel) may be unable to load it due to its size.
    To cancel this command, press <control key> + C.

    If you need to inspect the data, we recommend using Loupe Cell Browser.
    """ % (num_features, num_barcodes, dense_size, zero_frac)

    try:
        matrix.save_dense_csv(output_csv)
    except KeyboardInterrupt:
        if os.path.exists(output_csv):
            os.remove(output_csv)

if __name__ == '__main__':
    main()
